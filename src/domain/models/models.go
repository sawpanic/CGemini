package models

import "time"

// Coin represents a cryptocurrency.
type Coin struct {
	ID     string `json:"id"`
	Symbol string `json:"symbol"`
	Name   string `json:"name"`
}

// MarketData represents market information for a coin.
type MarketData struct {
	CoinID       string    `json:"coin_id"`
	PriceUSD     float64   `json:"price_usd"`
	Volume24hUSD float64   `json:"volume_24h_usd"`
	MarketCapUSD float64   `json:"market_cap_usd"`
	LastUpdated  time.Time `json:"last_updated"`
}

// Ticker represents real-time price and volume information.
type Ticker struct {
	Pair        string    `json:"pair"`
	LastPrice   float64   `json:"last_price"`
	Volume24h   float64   `json:"volume_24h"`
	Bid         float64   `json:"bid"`
	Ask         float64   `json:"ask"`
	LastUpdated time.Time `json:"last_updated"`
}

// OHLC represents Open-High-Low-Close data.
type OHLC struct {
	Pair      string    `json:"pair"`
	Open      float64   `json:"open"`
	High      float64   `json:"high"`
	Low       float64   `json:"low"`
	Close     float64   `json:"close"`
	Volume    float64   `json:"volume"`
	Timestamp time.Time `json:"timestamp"`
}

// OrderBook represents the bid and ask orders for a trading pair.
type OrderBook struct {
	Pair        string      `json:"pair"`
	Bids        [][]float64 `json:"bids"` // [price, volume]
	Asks        [][]float64 `json:"asks"` // [price, volume]
	LastUpdated time.Time   `json:"last_updated"`
}

// Signal represents a historical signal generated by the scoring engine.
type Signal struct {
	Timestamp time.Time
	Pair      string
	Score     float64
	Regime    string
	Reason    string // e.g., "Entry triggered", "Exit triggered"
}

// AuditEntry represents an immutable audit log entry.
type AuditEntry struct {
	Timestamp time.Time
	EventType string // e.g., "Score Calculated", "Trade Executed", "Config Changed"
	EntityID  string // ID of the entity being audited (e.g., pair, trade ID)
	Details   string // JSON string of relevant details
}

// OrderBookSnapshot represents a snapshot of an order book at a specific point in time.
type OrderBookSnapshot struct {
	Timestamp time.Time
	Pair      string
	Bids      [][]float64 // [price, volume]
	Asks      [][]float64 // [price, volume]
}
